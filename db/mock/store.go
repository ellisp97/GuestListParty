// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ellisp97/BE_Task_Oct20/golang/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	db "github.com/ellisp97/BE_Task_Oct20/golang/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AssignTableTx mocks base method.
func (m *MockStore) AssignTableTx(arg0 context.Context, arg1 db.AssignTableTxParams) (db.AssignTableTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignTableTx", arg0, arg1)
	ret0, _ := ret[0].(db.AssignTableTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignTableTx indicates an expected call of AssignTableTx.
func (mr *MockStoreMockRecorder) AssignTableTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignTableTx", reflect.TypeOf((*MockStore)(nil).AssignTableTx), arg0, arg1)
}

// CreateArrival mocks base method.
func (m *MockStore) CreateArrival(arg0 context.Context, arg1 db.CreateArrivalParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArrival", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArrival indicates an expected call of CreateArrival.
func (mr *MockStoreMockRecorder) CreateArrival(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArrival", reflect.TypeOf((*MockStore)(nil).CreateArrival), arg0, arg1)
}

// CreateGuest mocks base method.
func (m *MockStore) CreateGuest(arg0 context.Context, arg1 db.CreateGuestParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGuest", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGuest indicates an expected call of CreateGuest.
func (mr *MockStoreMockRecorder) CreateGuest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGuest", reflect.TypeOf((*MockStore)(nil).CreateGuest), arg0, arg1)
}

// CreateTable mocks base method.
func (m *MockStore) CreateTable(arg0 context.Context, arg1 db.CreateTableParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockStoreMockRecorder) CreateTable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockStore)(nil).CreateTable), arg0, arg1)
}

// DeleteGuest mocks base method.
func (m *MockStore) DeleteGuest(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGuest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGuest indicates an expected call of DeleteGuest.
func (mr *MockStoreMockRecorder) DeleteGuest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGuest", reflect.TypeOf((*MockStore)(nil).DeleteGuest), arg0, arg1)
}

// DeleteGuestTx mocks base method.
func (m *MockStore) DeleteGuestTx(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGuestTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGuestTx indicates an expected call of DeleteGuestTx.
func (mr *MockStoreMockRecorder) DeleteGuestTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGuestTx", reflect.TypeOf((*MockStore)(nil).DeleteGuestTx), arg0, arg1)
}

// DeleteTable mocks base method.
func (m *MockStore) DeleteTable(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTable", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTable indicates an expected call of DeleteTable.
func (mr *MockStoreMockRecorder) DeleteTable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTable", reflect.TypeOf((*MockStore)(nil).DeleteTable), arg0, arg1)
}

// GetArrival mocks base method.
func (m *MockStore) GetArrival(arg0 context.Context, arg1 int32) (db.Arrival, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArrival", arg0, arg1)
	ret0, _ := ret[0].(db.Arrival)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArrival indicates an expected call of GetArrival.
func (mr *MockStoreMockRecorder) GetArrival(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArrival", reflect.TypeOf((*MockStore)(nil).GetArrival), arg0, arg1)
}

// GetArrivalFromGuest mocks base method.
func (m *MockStore) GetArrivalFromGuest(arg0 context.Context, arg1 int32) (db.Arrival, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArrivalFromGuest", arg0, arg1)
	ret0, _ := ret[0].(db.Arrival)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArrivalFromGuest indicates an expected call of GetArrivalFromGuest.
func (mr *MockStoreMockRecorder) GetArrivalFromGuest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArrivalFromGuest", reflect.TypeOf((*MockStore)(nil).GetArrivalFromGuest), arg0, arg1)
}

// GetArrivals mocks base method.
func (m *MockStore) GetArrivals(arg0 context.Context, arg1 db.GetArrivalsParams) ([]db.Arrival, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArrivals", arg0, arg1)
	ret0, _ := ret[0].([]db.Arrival)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArrivals indicates an expected call of GetArrivals.
func (mr *MockStoreMockRecorder) GetArrivals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArrivals", reflect.TypeOf((*MockStore)(nil).GetArrivals), arg0, arg1)
}

// GetArrivedGuests mocks base method.
func (m *MockStore) GetArrivedGuests(arg0 context.Context, arg1 db.GetArrivedGuestsParams) ([]db.Guest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArrivedGuests", arg0, arg1)
	ret0, _ := ret[0].([]db.Guest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArrivedGuests indicates an expected call of GetArrivedGuests.
func (mr *MockStoreMockRecorder) GetArrivedGuests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArrivedGuests", reflect.TypeOf((*MockStore)(nil).GetArrivedGuests), arg0, arg1)
}

// GetEmptySeats mocks base method.
func (m *MockStore) GetEmptySeats(arg0 context.Context) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmptySeats", arg0)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmptySeats indicates an expected call of GetEmptySeats.
func (mr *MockStoreMockRecorder) GetEmptySeats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmptySeats", reflect.TypeOf((*MockStore)(nil).GetEmptySeats), arg0)
}

// GetGuest mocks base method.
func (m *MockStore) GetGuest(arg0 context.Context, arg1 int32) (db.Guest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuest", arg0, arg1)
	ret0, _ := ret[0].(db.Guest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuest indicates an expected call of GetGuest.
func (mr *MockStoreMockRecorder) GetGuest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuest", reflect.TypeOf((*MockStore)(nil).GetGuest), arg0, arg1)
}

// GetGuestForUpdate mocks base method.
func (m *MockStore) GetGuestForUpdate(arg0 context.Context, arg1 int32) (db.Guest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuestForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Guest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuestForUpdate indicates an expected call of GetGuestForUpdate.
func (mr *MockStoreMockRecorder) GetGuestForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuestForUpdate", reflect.TypeOf((*MockStore)(nil).GetGuestForUpdate), arg0, arg1)
}

// GetGuestFromName mocks base method.
func (m *MockStore) GetGuestFromName(arg0 context.Context, arg1 string) (db.Guest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuestFromName", arg0, arg1)
	ret0, _ := ret[0].(db.Guest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuestFromName indicates an expected call of GetGuestFromName.
func (mr *MockStoreMockRecorder) GetGuestFromName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuestFromName", reflect.TypeOf((*MockStore)(nil).GetGuestFromName), arg0, arg1)
}

// GetGuests mocks base method.
func (m *MockStore) GetGuests(arg0 context.Context, arg1 db.GetGuestsParams) ([]db.Guest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuests", arg0, arg1)
	ret0, _ := ret[0].([]db.Guest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuests indicates an expected call of GetGuests.
func (mr *MockStoreMockRecorder) GetGuests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuests", reflect.TypeOf((*MockStore)(nil).GetGuests), arg0, arg1)
}

// GetTable mocks base method.
func (m *MockStore) GetTable(arg0 context.Context, arg1 int32) (db.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTable", arg0, arg1)
	ret0, _ := ret[0].(db.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTable indicates an expected call of GetTable.
func (mr *MockStoreMockRecorder) GetTable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTable", reflect.TypeOf((*MockStore)(nil).GetTable), arg0, arg1)
}

// GetTableForUpdate mocks base method.
func (m *MockStore) GetTableForUpdate(arg0 context.Context, arg1 int32) (db.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableForUpdate indicates an expected call of GetTableForUpdate.
func (mr *MockStoreMockRecorder) GetTableForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableForUpdate", reflect.TypeOf((*MockStore)(nil).GetTableForUpdate), arg0, arg1)
}

// GetTables mocks base method.
func (m *MockStore) GetTables(arg0 context.Context, arg1 db.GetTablesParams) ([]db.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTables", arg0, arg1)
	ret0, _ := ret[0].([]db.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTables indicates an expected call of GetTables.
func (mr *MockStoreMockRecorder) GetTables(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTables", reflect.TypeOf((*MockStore)(nil).GetTables), arg0, arg1)
}

// UpdateGuestArrival mocks base method.
func (m *MockStore) UpdateGuestArrival(arg0 context.Context, arg1 db.UpdateGuestArrivalParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGuestArrival", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGuestArrival indicates an expected call of UpdateGuestArrival.
func (mr *MockStoreMockRecorder) UpdateGuestArrival(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGuestArrival", reflect.TypeOf((*MockStore)(nil).UpdateGuestArrival), arg0, arg1)
}

// UpdateTable mocks base method.
func (m *MockStore) UpdateTable(arg0 context.Context, arg1 db.UpdateTableParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTable", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTable indicates an expected call of UpdateTable.
func (mr *MockStoreMockRecorder) UpdateTable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTable", reflect.TypeOf((*MockStore)(nil).UpdateTable), arg0, arg1)
}
