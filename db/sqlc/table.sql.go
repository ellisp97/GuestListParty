// Code generated by sqlc. DO NOT EDIT.
// source: table.sql

package db

import (
	"context"
	"database/sql"
)

const createTable = `-- name: CreateTable :execresult
INSERT INTO tables(
    size,
    occupied
) VALUES (
    ?, ?
)
`

type CreateTableParams struct {
	Size     int32 `json:"size"`
	Occupied int32 `json:"occupied"`
}

func (q *Queries) CreateTable(ctx context.Context, arg CreateTableParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTable, arg.Size, arg.Occupied)
}

const deleteTable = `-- name: DeleteTable :exec
DELETE FROM tables
WHERE id=?
`

func (q *Queries) DeleteTable(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTable, id)
	return err
}

const getTable = `-- name: GetTable :one
SELECT id, size, occupied, created_at FROM tables
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTable(ctx context.Context, id int32) (Table, error) {
	row := q.db.QueryRowContext(ctx, getTable, id)
	var i Table
	err := row.Scan(
		&i.ID,
		&i.Size,
		&i.Occupied,
		&i.CreatedAt,
	)
	return i, err
}

const getTableForUpdate = `-- name: GetTableForUpdate :one
SELECT id, size, occupied, created_at FROM tables
WHERE id = ? LIMIT 1
FOR UPDATE
`

func (q *Queries) GetTableForUpdate(ctx context.Context, id int32) (Table, error) {
	row := q.db.QueryRowContext(ctx, getTableForUpdate, id)
	var i Table
	err := row.Scan(
		&i.ID,
		&i.Size,
		&i.Occupied,
		&i.CreatedAt,
	)
	return i, err
}

const getTables = `-- name: GetTables :many
SELECT id, size, occupied, created_at FROM tables 
ORDER BY id
LIMIT ?
OFFSET ?
`

type GetTablesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetTables(ctx context.Context, arg GetTablesParams) ([]Table, error) {
	rows, err := q.db.QueryContext(ctx, getTables, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Table{}
	for rows.Next() {
		var i Table
		if err := rows.Scan(
			&i.ID,
			&i.Size,
			&i.Occupied,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTable = `-- name: UpdateTable :exec
UPDATE tables
SET size = ?,
occupied = ?
WHERE id = ?
`

type UpdateTableParams struct {
	Size     int32 `json:"size"`
	Occupied int32 `json:"occupied"`
	ID       int32 `json:"id"`
}

func (q *Queries) UpdateTable(ctx context.Context, arg UpdateTableParams) error {
	_, err := q.db.ExecContext(ctx, updateTable, arg.Size, arg.Occupied, arg.ID)
	return err
}
