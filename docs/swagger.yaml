definitions:
  db.Guest:
    properties:
      arrival_time:
        $ref: '#/definitions/sql.NullTime'
      created_at:
        $ref: '#/definitions/sql.NullTime'
      entourage:
        type: integer
      guest_name:
        type: string
      id:
        type: integer
      table_id:
        type: integer
    type: object
  db.Table:
    properties:
      created_at:
        $ref: '#/definitions/sql.NullTime'
      id:
        type: integer
      occupied:
        type: integer
      size:
        type: integer
    type: object
  httputil.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  sql.NullTime:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
info:
  contact: {}
paths:
  /guest/{name}:
    delete:
      consumes:
      - application/json
      description: Checks there is a valid record based on the name value then performs
        a DELETE action.
      parameters:
      - description: Guest Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Guest'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Deletes a guest based on their Guest Name value.
  /guest_list/:
    get:
      consumes:
      - application/json
      description: Fetches an array of guest object ([]Guest), the requests are paginated
        with a minimum page_id of 1 and page_size of 5-20. Running a make test will
        generate some default data via the mysql unit tests.
      parameters:
      - description: Page ID
        in: query
        name: page_id
        required: true
        type: integer
      - description: Page Size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Guest'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: returns all guests on the guest_list
  /guest_list/{name}:
    post:
      consumes:
      - application/json
      description: Executes a POST request preceeding the check to see if the table
        is big enough for the party (1 + entourage).
      parameters:
      - description: Guest Name
        in: path
        name: name
        required: true
        type: string
      - description: Entourage
        in: body
        name: entourage
        required: true
        schema:
          type: integer
      - description: Table ID - unique identifier of the table (see getTables)
        in: body
        name: table_id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Creates a guest according to the name, table, and entourage arguments.
  /guests/:
    get:
      consumes:
      - application/json
      description: Fetches an array of guest object ([]Guest), who have already undergone
        an arrival event. The requests are paginated with a minimum page_id of 1 and
        page_size of 5-20. Running a make test will generate some default data via
        the mysql unit tests.
      parameters:
      - description: Page ID
        in: query
        name: page_id
        required: true
        type: integer
      - description: Page Size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Guest'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: returns all guests already arrived
  /guests/{name}:
    get:
      consumes:
      - application/json
      description: Fetches a guest object (Guest)
      parameters:
      - description: Guest Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Guest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: returns a guest based on their GuestName value.
    put:
      consumes:
      - application/json
      description: Performs a PUT action to the arrivals table to record an arrival
        of the guest and their party.
      parameters:
      - description: Guest Name
        in: path
        name: name
        required: true
        type: string
      - description: Entourage (May be different to original)
        in: body
        name: entourage
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Arrives the guest into the party
  /seats_empty:
    get:
      consumes:
      - application/json
      description: The empty seats are calculated from the difference between the
        Size and Occupied values in the table.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Gets all the empty seats
  /tables/:
    get:
      consumes:
      - application/json
      description: Fetches an array of table object ([]Table), the requests are paginated
        with a minimum page_id of 1 and page_size of 5-20. Running a make test will
        generate some default data via the mysql unit tests.
      parameters:
      - description: Page ID
        in: query
        name: page_id
        required: true
        type: integer
      - description: Page Size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Table'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: returns all tables
    post:
      consumes:
      - application/json
      description: Executes a POST request adding the table object to the db..
      parameters:
      - description: Table Size - minimum value is 1
        in: body
        name: size
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Creates a table according to the table size.
swagger: "2.0"
